name: Build and Release Multi-Platform on Version Change

on:
  push:
    branches:
      - main
    paths:
      - 'app/__main__.py' # 只有当这个文件改变时才触发

env:
  APP_NAME: khyg

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write # 需要上传构建产物
    outputs: # 定义作业输出
      version: ${{ steps.get_version.outputs.version_str }}
      output_name: ${{ steps.get_version.outputs.output_name_str }} # 输出构建产物的名称
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
      shell: pwsh # 使用 PowerShell

    - name: Extract version from __main__.py
      id: get_version # 给步骤一个 ID 以便引用其输出
      run: |
        $extracted_version = python run.py -v
        if (-not $extracted_version) {
          Write-Error "Failed to extract version from python run.py -v"
          exit 1
        }
        $output_file_name = "${{ env.APP_NAME }}-windows-v$extracted_version"
        
        # 设置环境变量供当前作业后续步骤使用
        echo "VERSION=$extracted_version" >> $env:GITHUB_ENV
        echo "OUTPUT_NAME=$output_file_name" >> $env:GITHUB_ENV
        
        # 设置作业输出，供其他作业使用
        echo "version_str=$extracted_version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        echo "output_name_str=$output_file_name" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

        Write-Host "Extracted Version: $extracted_version"
        Write-Host "Set OUTPUT_NAME to: $output_file_name"
        Write-Host "Set job output version_str to: $extracted_version"
        Write-Host "Set job output output_name_str to: $output_file_name"
      shell: pwsh

    - name: Verify Environment Variables
      run: |
        Write-Host "VERSION is: ${{ env.VERSION }}"
        Write-Host "OUTPUT_NAME is: ${{ env.OUTPUT_NAME }}"
        if (-not $env:OUTPUT_NAME) {
          Write-Error "OUTPUT_NAME environment variable is not set or is empty after extraction!"
          exit 1
        }
      shell: pwsh

    - name: Build Windows EXE
      run: |
        pyinstaller --onefile --name "${{ env.OUTPUT_NAME }}" --hidden-import noneprompt --hidden-import curl_cffi --hidden-import yaml --hidden-import requests --hidden-import loguru --hidden-import bili_ticket_gt_python --hidden-import segno --add-data "app;app" run.py
      shell: pwsh

    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable-${{ steps.get_version.outputs.version_str }} # 使用步骤输出的版本号
        path: dist/${{ steps.get_version.outputs.output_name_str }}.exe # 使用步骤输出的文件名

  build-macos:
    runs-on: macos-latest
    permissions:
      contents: write
    outputs: # 定义作业输出
      version: ${{ steps.get_version.outputs.version_str }}
      output_name: ${{ steps.get_version.outputs.output_name_str }} # 输出构建产物的名称
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Extract version from __main__.py
      id: get_version # 给步骤一个 ID
      run: |
        EXTRACTED_VERSION=$(python run.py -v)
        if [ -z "$EXTRACTED_VERSION" ]; then
          echo "::error::Failed to extract version from python run.py -v"
          exit 1 # 确保在提取失败时作业失败
        fi
        OUTPUT_FILE_NAME="${{ env.APP_NAME }}-macos-v$EXTRACTED_VERSION"
        
        # 设置环境变量供当前作业后续步骤使用
        echo "VERSION=$EXTRACTED_VERSION" >> $GITHUB_ENV
        echo "OUTPUT_NAME=$OUTPUT_FILE_NAME" >> $GITHUB_ENV
        
        # 设置作业输出，供其他作业使用
        echo "version_str=$EXTRACTED_VERSION" >> $GITHUB_OUTPUT
        echo "output_name_str=$OUTPUT_FILE_NAME" >> $GITHUB_OUTPUT
        
        echo "Extracted Version: $EXTRACTED_VERSION"
        echo "Set OUTPUT_NAME to: $OUTPUT_FILE_NAME"
        echo "Set job output version_str to: $EXTRACTED_VERSION"
        echo "Set job output output_name_str to: $OUTPUT_FILE_NAME"

    - name: Verify Environment Variables
      run: |
        echo "VERSION is: ${{ env.VERSION }}"
        echo "OUTPUT_NAME is: ${{ env.OUTPUT_NAME }}"
        if [ -z "${{ env.OUTPUT_NAME }}" ]; then
            echo "::error::OUTPUT_NAME environment variable is not set or is empty after extraction!"
            exit 1
        fi

    - name: Build macOS App
      run: |
        pyinstaller --onefile --name "${{ env.OUTPUT_NAME }}" --hidden-import noneprompt --hidden-import curl_cffi --hidden-import yaml --hidden-import requests --hidden-import loguru --hidden-import bili_ticket_gt_python --hidden-import segno --add-data="app:app" run.py
        chmod +x dist/"${{ env.OUTPUT_NAME }}"

    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-executable-${{ steps.get_version.outputs.version_str }} # 使用步骤输出的版本号
        path: dist/${{ steps.get_version.outputs.output_name_str }} # 使用步骤输出的文件名

  build-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs: # 定义作业输出
      version: ${{ steps.get_version.outputs.version_str }}
      output_name: ${{ steps.get_version.outputs.output_name_str }} # 输出构建产物的名称
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Extract version from __main__.py
      id: get_version # 给步骤一个 ID
      run: |
        EXTRACTED_VERSION=$(python run.py -v)
        if [ -z "$EXTRACTED_VERSION" ]; then
          echo "::error::Failed to extract version from python run.py -v"
          exit 1 # 确保在提取失败时作业失败
        fi
        OUTPUT_FILE_NAME="${{ env.APP_NAME }}-macos-v$EXTRACTED_VERSION"
        
        # 设置环境变量供当前作业后续步骤使用
        echo "VERSION=$EXTRACTED_VERSION" >> $GITHUB_ENV
        echo "OUTPUT_NAME=$OUTPUT_FILE_NAME" >> $GITHUB_ENV
        
        # 设置作业输出，供其他作业使用
        echo "version_str=$EXTRACTED_VERSION" >> $GITHUB_OUTPUT
        echo "output_name_str=$OUTPUT_FILE_NAME" >> $GITHUB_OUTPUT
        
        echo "Extracted Version: $EXTRACTED_VERSION"
        echo "Set OUTPUT_NAME to: $OUTPUT_FILE_NAME"
        echo "Set job output version_str to: $EXTRACTED_VERSION"
        echo "Set job output output_name_str to: $OUTPUT_FILE_NAME"

    - name: Verify Environment Variables
      run: |
        echo "VERSION is: ${{ env.VERSION }}"
        echo "OUTPUT_NAME is: ${{ env.OUTPUT_NAME }}"
        if [ -z "${{ env.OUTPUT_NAME }}" ]; then
            echo "::error::OUTPUT_NAME environment variable is not set or is empty after extraction!"
            exit 1
        fi
    - name: Build Linux App
      run: |
        pyinstaller --onefile --name "${{ env.OUTPUT_NAME }}" --hidden-import noneprompt --hidden-import curl_cffi --hidden-import yaml --hidden-import requests --hidden-import loguru --hidden-import bili_ticket_gt_python --hidden-import segno --add-data="app:app" run.py
        chmod +x dist/"${{ env.OUTPUT_NAME }}"

    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-executable-${{ steps.get_version.outputs.version_str }} # 使用步骤输出的版本号
        path: dist/${{ steps.get_version.outputs.output_name_str }} # 使用步骤输出的文件名

  create-release:
    needs: [build-windows, build-macos, build-linux] # 在三个构建都成功后运行
    runs-on: ubuntu-latest
    permissions:
      contents: write # 需要创建标签和发布
    steps:
      # 不需要再 Checkout 和 Extract version for Release
      # 版本号将从 needs 上下文获取

    - name: Define Release Variables
      id: release_vars
      run: |
        # 从 build-windows 作业获取版本号
        echo "RELEASE_VERSION=${{ needs.build-windows.outputs.version }}"
        echo "Using version for release: ${{ needs.build-windows.outputs.version }}"

        # 从构建作业输出中获取确切的文件名
        WINDOWS_FILENAME="${{ needs.build-windows.outputs.output_name }}.exe"
        MACOS_FILENAME="${{ needs.build-macos.outputs.output_name }}"
        
        echo "WINDOWS_FILENAME_ENV=$WINDOWS_FILENAME" >> $GITHUB_ENV
        echo "MACOS_FILENAME_ENV=$MACOS_FILENAME" >> $GITHUB_ENV
        
        # 也设置为步骤输出，方便后续直接引用
        echo "final_windows_filename=$WINDOWS_FILENAME" >> $GITHUB_OUTPUT
        echo "final_macos_filename=$MACOS_FILENAME" >> $GITHUB_OUTPUT


    - name: Download Windows Artifact
      uses: actions/download-artifact@v4
      with:
        # 使用 build-windows 作业输出的版本号来匹配正确的构建产物名称
        name: windows-executable-${{ needs.build-windows.outputs.version }}
        path: artifacts # 将所有构建产物下载到通用目录

    - name: Download macOS Artifact
      uses: actions/download-artifact@v4
      with:
        # 使用 build-macos 作业输出的版本号来匹配正确的构建产物名称
        name: macos-executable-${{ needs.build-macos.outputs.version }}
        path: artifacts # 将所有构建产物下载到通用目录

    - name: Download Linux Artifact
      uses: actions/download-artifact@v4
      with:
        # 使用 build-macos 作业输出的版本号来匹配正确的构建产物名称
        name: linux-executable-${{ needs.build-macos.outputs.version }}
        path: artifacts # 将所有构建产物下载到通用目录

    - name: Verify Downloaded Artifacts
      run: |
        echo "Checking for Windows artifact: artifacts/${{ steps.release_vars.outputs.final_windows_filename }}"
        ls -l artifacts/
        if [ ! -f "artifacts/${{ steps.release_vars.outputs.final_windows_filename }}" ]; then
          echo "::error::Windows artifact not found after download! Expected: artifacts/${{ steps.release_vars.outputs.final_windows_filename }}"
          exit 1
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.build-windows.outputs.version }} # 使用来自 build-windows 的版本
        name: Release v${{ needs.build-windows.outputs.version }}
        body: |
          Automated release for version ${{ needs.build-windows.outputs.version }}.

          **Downloads:**
          * Windows: `${{ steps.release_vars.outputs.final_windows_filename }}`
          * macOS: `${{ steps.release_vars.outputs.final_macos_filename }}`
          * Linux: `${{ steps.release_vars.outputs.final_linux_filename }}`
        draft: false
        prerelease: false
        files: |
          artifacts/${{ steps.release_vars.outputs.final_windows_filename }}
          artifacts/${{ steps.release_vars.outputs.final_macos_filename }}
          artifacts/${{ steps.release_vars.outputs.final_linux_filename }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}